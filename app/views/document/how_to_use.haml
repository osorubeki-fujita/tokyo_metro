= render "common_content"

- content_for :right_contents do
  = ::TokyoMetro::App::Renderer::Twitter.new( request , :tokyo_metro ).render

= ::TokyoMetro::App::Renderer::Concern::Header::Title::DocumentContent.new( request , @title_ja , @title_en ).render

%div{ id: :how_to_use }
  %div{ class: :what_s_ruby_for_rails }
    %h1<
      = "What's \"Ruby for Rails\"?"
    %p<
      = "Ruby for Rails は、鉄道利用者向けの総合的な情報提供システムです。"
    %p<
      = "どの鉄道事業者のWebサイトにもある、時刻表、駅施設情報、運賃情報などを、Ruby on Rails を用いて提供します。"
    %p<
      = "日本生まれの言語 Ruby が世界に飛び出て、デンマーク人の手により Ruby on Rails が誕生したように、鉄道大国・日本で生まれたシステムが世界各国の鉄道事業者で使われたらいいな…という期待（取らぬ狸の皮算用？）も込めて名付けました。"
    %p<
      = "今回は、そのプロトタイプを東京メトロオープンデータ活用コンテストの作品として応募致します。"
  %div{ class: :explanation }
    %h1<
      = "How to use"
    %p<
      = "使い方のご説明を致します。"
    %p<
      = "といきたいところですが、正直、「使い方を説明しなくても使えます」というのがすべてです。"
    %p<
      = "2か月間の開発期間（しかも毎日朝から晩までという訳ではない）が限られていたこと、人員と技術（素人1人！）が限られていたことから、一般的な（よく言えばオーソドックスな、悪く言えばありきたりな）運賃、時刻表、路線、駅施設情報と、それに付随した駅の乗降客数データの提供、駅情報に対するGoogle Mapしか反映させることができませんでした。"
    %p<
      = "もっと正直に言ってしまうと、「使い方を説明しないと使えない機能を盛り込むことができなかった」ということでもあり、そこは認めざるを得ませんが、アプリケーションは頭を使わずに操作できてこそ真価を発揮する訳ですから、現時点ではこれでもよいと思っています。"
    %p<
      = "ただ、盛り込みたかった機能のアイディアはまだまだたくさんあります。"
    %p<
      = "負け惜しみのようで格好悪いかもしれませんが、もっと開発を進めたいと思っています。"
    %p<
      = "そして、今後、機能の強化やソースコードの公開を行い、「Railに沿うように規約に則ってコーディングすれば簡単にWebアプリケーションが開発できる、しかも保守性が高い」というRuby on Rails の特長そのものを生かした鉄道事業者（あるいはバス事業者）のWebサイト構築に寄与したいと思っています。"
    %p<
      = "ダイヤ改正、運賃改定、新線開業といった大きな動きにも対応しやすく、Web制作に手間がかからなければ中小の事業者も使いやすいという点で、きちんとしたものを作れば導入側に大きなメリットがあるものと思われます。"
  %div{ class: :english }
    %h1<
      = "ローマ字表記について"
    %p<
      = "機能面の未熟さの代わりにという訳ではありませんが、作成の際に意識した重要な点を1つご説明します。"
    %p<
      = "一般的に、交通機関や官公庁などのWebサイトでは日本語ページと英語ページ（さらには中国語、韓国語…）を別々に作成しています。"
    %p<
      = "しかし今回、私はあえて意識して1つのページに日本語と英語（ローマ字）を併記しました。（現時点では、ページのタイトルや駅名・路線名を書いた程度ですが…）"
    %p<
      = "別々に情報を提供するのが間違いであるとは言いません。しかし、Japanese Only, English Onlyだけではない Hybrid のページも必要だろう、あえて「複数言語を併記する」というのも国際化時代の一つの情報提供の解なのではないか、と思ったのです。"
    %p<
      = "それはなぜか。「日本語は理解できるが英語はあまり理解できない・得意ではない」という人が、「英語は理解できるが日本語はあまり理解できない」という人に道を訊ねられたらどうなるか、と想像してみてください。ありがちなのは、"
    %div
      %p{ style: "text-align:center" }<
        = "「うわ、あう、あ、あ、あい、きゃんと、すぴーく、いんぐりっしゅ、そーりー」"
      %p<
        = "と言って、急いでその場から立ち去る"
    %p<
      = "というパターンです。しかし、これではお互いに後味の悪い思いをするだけです。好ましいやり方とはいえませんね。"
    %p<
      = "「英語は苦手だが、日本語で質問されれば答えられる」という内容であれば、拙いながらも英語で説明してあげた方が親切です。"
    %p<
      = "そこで必要になるのが「日英併記」という発想です。"
    %p<
      = "「いまの時代、英語専用の案内アプリがあるのだからそんなのはいらない」という声も聞こえて来そうですが、全然そんなことはありません。"
    %p<
      = "これは私自身が街中で外国人から声を掛けられて、あるいは鉄道事業者で仕事をした経験から（短い期間で裏方の下っ端ではありましたが、東京メトロではない事業者での実務経験があります）気付いたことですが、スマートフォンでGoogle Mapや乗り換えアプリの画面を出しながら質問をしてくる外国人というのはとても多いのです（というより、ほとんどがそうです）。"
    %p<
      = "新宿のように同じ名前や似たような名前の駅がたくさんあるような場所では、アプリだけではどの駅から乗ればよいのか分かりません。A地点からB地点までの経路についてアプリが複数の答えを出してきた場合、結局どれがいいのかの判断に迷います。そんな状況に陥ってしまったとき、彼らは最後の手段として日本人を捕まえます。"
    %p<
      = "そんな外国人から助けを求められたとき、日英併記の同じ画面を見ながらであれば、言葉だけではうまく説明できない日本人でもジェスチャーで何とか乗り切れる可能性があります。また、日英併記の画面であれば外国人からの「日本人に訊けば答えてくれる」という期待が上がります。"
    %p<
      = "日本人が 'May I help you?' と声をかけやすくするためにも、日本人へ 'Excuse me.' と声をかけやすくするためにも、「双方が同じ画面をみながらその意味するところを理解できる」という環境を作るのが（見落とされがちですが）重要ではないかと思うのです。"
    - # %p<
    - #   = "「東京オリンピック」「おもてなし」'Visit Japan' のワードを持ち出すまでもなく、"
  %div{ class: :used_library }
    %ul<
      %li<
        = "Ruby 関連（gem など）"
        %ul<
          %li<
            = "Ruby ver"
          %li<
            = "Ruby on Rails"
      %li<
        = "その他のWeb関連技術等"
        %ul<
          %li<
            = "jQuery"
          %li<
            = "SCSS"
          - # - %li<
          - #   = " (box)"
      %li<
        = "その他"
        %ul<
          %li<
            = link_to( "日本の伝統色" , "http://www.colordic.org/w/" )
  %div{ class: :to_do }
    %h1<
      = "To do"
    %p<
      = "データベース構築（というよりデータベース操作の習得）に思いのほか手間がかかってしまったこと、そもそもの技術力と知識の不足から、今回の応募作品にはUI, UXの改善点が多々あると感じています。"
    %p<
      = "時間的余裕と技術さえあれば jQuery, Ajaxの機能を最大限に活用し、スマートフォン対応もしたかったところですが、"
    %ul<
      %li<
        = "Web制作経験はほぼ皆無、趣味でプログラミングをする程度の素人（東京メトロ利用者で鉄道ファン、鉄道関連の実務経験も少しあり）が、仕事の合間に制作"
      %li<
        = "制作者は Ruby に触ったことはあるが、Rails は初めて。JavaScriptも「名前は知ってる」レベルから。"
      %li<
        = "Ruby on Railsを選んだ理由は、「名前が鉄道会社のコンテストにぴったりだから」という単純な理由"
      %li<
        = "制作期間は2か月"
    %p<
      = "と悲惨な状況の中ではこれが限界でした（そもそもUI, UXなんていう言葉は最近まで知りませんでした）。"
    %p<
      = "せめて、今回のコンテストのAPIでの目玉機能であったリアルタイム運行情報は反映させたかったところです。"
    %p<
      = "ただ、おそらく今回のコンテストの参加者の大半がWebやiOSアプリのプロばかりと思われる中で、「鉄道が好き」「鉄道に詳しい」だけで突き進んで2か月あればここまではできる、ということを示すことができたのは一つの成果であると自負しています。（ド素人に毛が生えた程度の割にはよくやった ）"
    %p<
      = "我儘を言えば、もう少しだけチャンスを頂いて、様々な機能を追加していくことができれば嬉しく思います。"
    %p<
      = "具体的なアイディアは次のとおりです。"
    %h2<
      = "オンデマンド時刻表"
    %p<
      = "プルダウンメニューから列車種別や行先・停車駅を選択したり、「先着列車のみ表示」などのオプションを選択したりすると、その条件に合致した列車のみを表示してくれる時刻表（たぶん誰かが作ってる）"
    %p<
      = "有楽町線・副都心線（他の事業者であれば、JR東海道線・横須賀線・宇都宮線・高崎線、京急・都営浅草線・京成など）のような複雑な運行形態の路線の利用者にとっては非常に役立ちます。"
    %p<
      = "また、事業者側から見ても、案内のしやすさ向上や案内ミスの防止という点で効果を発揮します。"
  %h2<
    = "リアルタイム運行情報と連動した、乗客からの車内空調の適正温度調査"
  %p<
    = "とりあえずはクライアントサイドのテンプレート（こんなのがあったら便利じゃありませんか？という提案）を作る"
  %ul
    %li<
      = "リアルタイム運行情報から乗車している列車を選択し、暑すぎる・寒すぎるといった体感をサーバーに送る"
    %li<
      = "当日の気温や混雑度、乗客からの報告をデータベース化し、気象条件や季節、混雑度に合わせた最適な空調の設定温度を見極める（設定温度の関数を作る研究）"
  = "実務の中で知ったことの1つに、「空調に関する苦情はとても多い」というものがあります。これを減らすことは、乗客の満足度を上げるのみならず、苦情（その相手をする、処理をする手間）を軽減させるという点で事業者側にもメリットがあると考えられます。"
  %p<
    = "JR東日本がすでに山手線の列車で行なっているように、「音声ビーコンから乗車中の列車の情報を取得してアプリに表示する」ということが可能になれば、"
  %ul
    %li<
      = "乗客がその場での体感（暑すぎる・寒すぎる）をサーバーに送信"
    %li<
      = "サーバーから列車へ情報が送られる"
    %li<
      = "すぐに乗務員室の画面に情報が届く"
    %li<
      = "車掌の判断で手動で温度の微調整を行う"
  %p<
    = "といった「乗客の、乗務員による、乗客のための、民主的な空調設定」も技術的にはできるようになります。（いたずら対策など、現実的には難がありますが）"
  %div{ class: :thanks }
    %p<
      = "最後になりましたが、このような機会を提供して下さった関係各位に感謝申し上げます。"